#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test des r√®gles de cl√©s pour MCD -> MLD -> MPD -> SQL
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from views.markdown_mcd_parser import MarkdownMCDParser
from views.model_converter import ModelConverter

def test_mcd_to_mld_conversion():
    """Teste la conversion MCD vers MLD avec gestion correcte des cl√©s"""
    print("=== TEST CONVERSION MCD -> MLD ===")
    
    # MCD sans cl√©s (conceptuel pur)
    mcd_content = """# Syst√®me de Gestion

## Client
- nom (varchar) : nom du client
- email (varchar) : adresse email
- telephone (varchar) : num√©ro de t√©l√©phone

## Commande
- date_commande (date) : date de commande
- montant (decimal) : montant total
- statut (varchar) : statut de la commande

### Client <-> Commande : Passe
**Un client peut passer plusieurs commandes**
Client : 1,1
Commande : 0,n
"""
    
    # Parser le MCD
    parser = MarkdownMCDParser()
    mcd_structure = parser.parse_markdown(mcd_content)
    
    print("‚úÖ MCD pars√© correctement")
    print(f"   Entit√©s: {len(mcd_structure['entities'])}")
    print(f"   Associations: {len(mcd_structure['associations'])}")
    
    # Convertir vers MLD
    converter = ModelConverter()
    mld_structure = converter._convert_to_mld(mcd_structure)
    
    print("\n‚úÖ Conversion MCD -> MLD r√©ussie")
    print(f"   Tables: {len(mld_structure['tables'])}")
    print(f"   Cl√©s √©trang√®res: {len(mld_structure['foreign_keys'])}")
    
    # V√©rifier les r√®gles de cl√©s
    checks = []
    
    # 1. V√©rifier que chaque table a une cl√© primaire
    for table_name, table in mld_structure["tables"].items():
        checks.append((f"Table {table_name} a une cl√© primaire", len(table["primary_key"]) > 0))
    
    # 2. V√©rifier que les cl√©s √©trang√®res sont correctes
    for fk in mld_structure["foreign_keys"]:
        checks.append((f"Cl√© √©trang√®re {fk['table']}.{fk['column']} -> {fk['referenced_table']}", 
                     fk["table"] in mld_structure["tables"] and 
                     fk["referenced_table"] in mld_structure["tables"]))
    
    # 3. V√©rifier que les noms de tables sont en minuscules
    for table_name in mld_structure["tables"].keys():
        checks.append((f"Nom de table en minuscules: {table_name}", table_name.islower()))
    
    # Afficher les r√©sultats
    success_count = 0
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}")
        if result:
            success_count += 1
    
    print(f"\nR√®gles de cl√©s MLD: {success_count}/{len(checks)} ({success_count/len(checks)*100:.1f}%)")
    return success_count == len(checks)

def test_mld_to_mpd_conversion():
    """Teste la conversion MLD vers MPD"""
    print("\n=== TEST CONVERSION MLD -> MPD ===")
    
    # Cr√©er un MLD de test
    mld_structure = {
        "tables": {
            "client": {
                "name": "client",
                "columns": [
                    {"name": "id", "type": "INTEGER", "nullable": False, "auto_increment": True},
                    {"name": "nom", "type": "VARCHAR(255)", "nullable": True},
                    {"name": "email", "type": "VARCHAR(255)", "nullable": True}
                ],
                "primary_key": ["id"]
            },
            "commande": {
                "name": "commande",
                "columns": [
                    {"name": "id", "type": "INTEGER", "nullable": False, "auto_increment": True},
                    {"name": "date_commande", "type": "DATE", "nullable": True},
                    {"name": "montant", "type": "DECIMAL(10,2)", "nullable": True},
                    {"name": "client_id", "type": "INTEGER", "nullable": False}
                ],
                "primary_key": ["id"]
            }
        },
        "foreign_keys": [
            {
                "table": "commande",
                "column": "client_id",
                "referenced_table": "client",
                "referenced_column": "id",
                "constraint_name": "fk_commande_client"
            }
        ],
        "constraints": []
    }
    
    # Convertir vers MPD
    converter = ModelConverter()
    mpd_structure = converter.generate_mpd(mld_structure, "mysql")
    
    print("‚úÖ Conversion MLD -> MPD r√©ussie")
    print(f"   Tables: {len(mpd_structure['tables'])}")
    print(f"   SGBD: {mpd_structure['dbms']}")
    
    # V√©rifier les optimisations MPD
    checks = []
    
    # 1. V√©rifier que les index sont ajout√©s
    total_indexes = sum(len(table["indexes"]) for table in mpd_structure["tables"].values())
    checks.append(("Index automatiques ajout√©s", total_indexes > 0))
    
    # 2. V√©rifier les optimisations sp√©cifiques au SGBD
    for table_name, table in mpd_structure["tables"].items():
        for column in table["columns"]:
            if column["name"] == "id" and column.get("auto_increment"):
                checks.append((f"Auto-increment pour {table_name}.id", True))
    
    # Afficher les r√©sultats
    success_count = 0
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}")
        if result:
            success_count += 1
    
    print(f"\nOptimisations MPD: {success_count}/{len(checks)} ({success_count/len(checks)*100:.1f}%)")
    return success_count == len(checks)

def test_mpd_to_sql_generation():
    """Teste la g√©n√©ration SQL √† partir du MPD"""
    print("\n=== TEST G√âN√âRATION SQL ===")
    
    # Cr√©er un MPD de test
    mpd_structure = {
        "dbms": "mysql",
        "tables": {
            "client": {
                "name": "client",
                "columns": [
                    {"name": "id", "type": "INT AUTO_INCREMENT", "nullable": False},
                    {"name": "nom", "type": "VARCHAR(255)", "nullable": True},
                    {"name": "email", "type": "VARCHAR(255)", "nullable": True}
                ],
                "primary_key": ["id"],
                "indexes": [
                    {"name": "idx_client_nom", "columns": ["nom"], "type": "BTREE"}
                ]
            },
            "commande": {
                "name": "commande",
                "columns": [
                    {"name": "id", "type": "INT AUTO_INCREMENT", "nullable": False},
                    {"name": "date_commande", "type": "DATE", "nullable": True},
                    {"name": "montant", "type": "DECIMAL(10,2)", "nullable": True},
                    {"name": "client_id", "type": "INT", "nullable": False}
                ],
                "primary_key": ["id"],
                "indexes": [
                    {"name": "idx_commande_client_id", "columns": ["client_id"], "type": "BTREE"}
                ]
            }
        },
        "foreign_keys": [
            {
                "table": "commande",
                "column": "client_id",
                "referenced_table": "client",
                "referenced_column": "id",
                "constraint_name": "fk_commande_client"
            }
        ],
        "constraints": []
    }
    
    # G√©n√©rer le SQL
    converter = ModelConverter()
    sql_script = converter.generate_sql_from_mpd(mpd_structure)
    
    print("‚úÖ G√©n√©ration SQL r√©ussie")
    print(f"   Longueur du script: {len(sql_script)} caract√®res")
    
    # V√©rifier le contenu SQL
    checks = []
    
    # 1. V√©rifier que les tables sont cr√©√©es
    checks.append(("CREATE TABLE client", "CREATE TABLE client" in sql_script))
    checks.append(("CREATE TABLE commande", "CREATE TABLE commande" in sql_script))
    
    # 2. V√©rifier que les cl√©s primaires sont d√©finies
    checks.append(("PRIMARY KEY", "PRIMARY KEY" in sql_script))
    
    # 3. V√©rifier que les cl√©s √©trang√®res sont d√©finies
    checks.append(("FOREIGN KEY", "FOREIGN KEY" in sql_script))
    
    # 4. V√©rifier que les index sont cr√©√©s
    checks.append(("CREATE INDEX", "CREATE INDEX" in sql_script))
    
    # 5. V√©rifier les optimisations MySQL
    checks.append(("ENGINE=InnoDB", "ENGINE=InnoDB" in sql_script))
    checks.append(("AUTO_INCREMENT", "AUTO_INCREMENT" in sql_script))
    
    # Afficher les r√©sultats
    success_count = 0
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}")
        if result:
            success_count += 1
    
    print(f"\nG√©n√©ration SQL: {success_count}/{len(checks)} ({success_count/len(checks)*100:.1f}%)")
    
    # Afficher un extrait du SQL g√©n√©r√©
    print("\nüìÑ Extrait du SQL g√©n√©r√©:")
    lines = sql_script.split('\n')
    for i, line in enumerate(lines[:20]):  # Afficher les 20 premi√®res lignes
        print(f"   {i+1:2d}: {line}")
    if len(lines) > 20:
        print(f"   ... ({len(lines)-20} lignes suppl√©mentaires)")
    
    return success_count == len(checks)

def test_complete_workflow():
    """Teste le workflow complet MCD -> MLD -> MPD -> SQL"""
    print("\n=== TEST WORKFLOW COMPLET ===")
    print("üîç MODE VERBOSE ACTIV√â")
    
    # MCD de test
    mcd_content = """# Syst√®me de Gestion Avanc√©

## Utilisateur
- nom (varchar) : nom de l'utilisateur
- email (varchar) : adresse email
- date_inscription (date) : date d'inscription

## Produit
- nom (varchar) : nom du produit
- prix (decimal) : prix unitaire
- stock (integer) : quantit√© en stock

## Commande
- date_commande (date) : date de commande
- montant_total (decimal) : montant total
- statut (varchar) : statut de la commande

## Utilisateur <-> Commande : Passe
**Un utilisateur peut passer plusieurs commandes**
Utilisateur : 1,1
Commande : 0,n

## Produit <-> Commande : Contient
**Une commande peut contenir plusieurs produits**
Produit : 1,1
Commande : 0,n
"""
    
    # Workflow complet
    parser = MarkdownMCDParser()
    converter = ModelConverter()
    
    # 1. Parser MCD
    print("üìù Parsing MCD...")
    mcd_structure = parser.parse_markdown(mcd_content)
    print("‚úÖ MCD pars√©")
    print(f"   üìä Entit√©s: {len(mcd_structure.get('entities', {}))}")
    print(f"   üìä Associations: {len(mcd_structure.get('associations', []))}")
    print(f"   üìä Score de pr√©cision: {mcd_structure.get('metadata', {}).get('precision_score', 0):.1f}%")
    
    # 2. Convertir vers MLD
    print("üîÑ Conversion MCD -> MLD...")
    mld_structure = converter._convert_to_mld(mcd_structure)
    print("‚úÖ MLD g√©n√©r√©")
    print(f"   üìä MLD type: {type(mld_structure)}")
    print(f"   üìä MLD keys: {list(mld_structure.keys()) if mld_structure else 'None'}")
    print(f"   üìä Tables: {len(mld_structure.get('tables', {}))}")
    print(f"   üìä Cl√©s √©trang√®res: {len(mld_structure.get('foreign_keys', []))}")
    
    # 3. Convertir vers MPD
    print("üîÑ Conversion MLD -> MPD...")
    mpd_structure = converter.generate_mpd(mld_structure, "mysql")
    print("‚úÖ MPD g√©n√©r√©")
    print(f"   üìä MPD type: {type(mpd_structure)}")
    print(f"   üìä MPD keys: {list(mpd_structure.keys()) if mpd_structure else 'None'}")
    print(f"   üìä Tables MPD: {len(mpd_structure.get('tables', {}))}")
    print(f"   üìä Cl√©s √©trang√®res MPD: {len(mpd_structure.get('foreign_keys', []))}")
    print(f"   üìä SGBD: {mpd_structure.get('dbms', 'non d√©fini')}")
    
    # 4. G√©n√©rer SQL
    print("üîÑ G√©n√©ration SQL...")
    print(f"   üìä MPD structure: {type(mpd_structure)}")
    print(f"   üìä MPD keys: {list(mpd_structure.keys()) if mpd_structure else 'None'}")
    sql_script = converter.generate_sql_from_mpd(mpd_structure)
    print("‚úÖ SQL g√©n√©r√©")
    print(f"   üìä Longueur SQL: {len(sql_script) if sql_script else 0}")
    print(f"   üìä Type SQL: {type(sql_script)}")
    if sql_script:
        print(f"   üìä Premi√®res lignes: {sql_script[:200]}...")
    else:
        print("   ‚ö†Ô∏è  SQL vide ou None!")
    
    # V√©rifications finales
    checks = []
    
    # V√©rifier que toutes les entit√©s MCD sont devenues des tables
    checks.append(("Entit√©s -> Tables", len(mld_structure["tables"]) == len(mcd_structure["entities"])))
    
    # V√©rifier que les associations sont devenues des cl√©s √©trang√®res
    expected_fks = len(mcd_structure["associations"])
    checks.append(("Associations -> Cl√©s √©trang√®res", len(mld_structure["foreign_keys"]) >= expected_fks))
    
    # V√©rifier que le SQL est valide (avec v√©rification de s√©curit√©)
    if sql_script is None:
        sql_script = ""
    checks.append(("SQL valide", len(sql_script) > 1000))
    checks.append(("Tables SQL", sql_script.count("CREATE TABLE") == len(mld_structure["tables"])))
    
    # Afficher les r√©sultats
    success_count = 0
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}")
        if result:
            success_count += 1
    
    print(f"\nWorkflow complet: {success_count}/{len(checks)} ({success_count/len(checks)*100:.1f}%)")
    
    return success_count == len(checks)

def main():
    """Fonction principale de test"""
    print("üîë TEST DES R√àGLES DE CL√âS - BARRELMCD")
    print("=" * 60)
    
    tests = [
        ("MCD -> MLD", test_mcd_to_mld_conversion),
        ("MLD -> MPD", test_mld_to_mpd_conversion),
        ("MPD -> SQL", test_mpd_to_sql_generation),
        ("Workflow complet", test_complete_workflow),
    ]
    
    results = {}
    total_score = 0
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results[test_name] = result
            total_score += 1 if result else 0
        except Exception as e:
            print(f"‚ùå Erreur dans le test {test_name}: {e}")
            results[test_name] = False
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS DE CL√âS")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{status} {test_name}")
    
    overall_score = (total_score / len(tests)) * 100
    print(f"\nüéØ SCORE GLOBAL DES CL√âS: {overall_score:.1f}%")
    
    if overall_score >= 90:
        print("üèÜ EXCELLENT - Les r√®gles de cl√©s sont parfaitement impl√©ment√©es")
    elif overall_score >= 75:
        print("‚úÖ BON - Les r√®gles de cl√©s sont bien impl√©ment√©es")
    elif overall_score >= 60:
        print("‚ö†Ô∏è  MOYEN - Les r√®gles de cl√©s n√©cessitent des am√©liorations")
    else:
        print("‚ùå INSUFFISANT - Les r√®gles de cl√©s n√©cessitent une refonte")
    
    print(f"\nüí° Les cl√©s sont maintenant correctement g√©r√©es dans tous les mod√®les !")

if __name__ == "__main__":
    main() 